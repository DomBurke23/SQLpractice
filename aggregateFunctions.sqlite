/*
 * we are going to learn how to perform calculations using SQL.
 * Calculations performed on multiple rows of a table are called aggregates.
 */
 
SELECT *
FROM fake_apps;

/* calculate how many rows are in a table is to use the COUNT() function. */
SELECT COUNT(*) 
FROM fake_apps;

SELECT COUNT(*) 
FROM fake_apps
WHERE price = 0;

/* SUM() is a function that takes the name of a column as an argument and 
 * returns the sum of all the values in that column. */
SELECT SUM(downloads)
FROM fake_apps;

/* The MAX() and MIN() functions return the highest and lowest values in a column, respectively. 
 * MAX() takes the name of a column as an argument and returns the largest value in that column. 
 * MIN() works the same way but it does the exact opposite; it returns the smallest value. */
SELECT MAX(downloads)
FROM fake_apps;

SELECT MIN(downloads)
FROM fake_apps;

SELECT MAX(price)
FROM fake_apps;

/* AVG() function to quickly calculate the average value of a particular column. 
 * The AVG() function works by taking a column name as an argument and 
 * returns the average value for that column. */
SELECT AVG(downloads)
FROM fake_apps;

/* It rounds the values in the column to the number of decimal places specified by the integer. 
 * ROUND() function takes two arguments inside the parenthesis:
 * 	- a column name
 *	- an integer */
SELECT ROUND(price, 0)
FROM fake_apps;

SELECT name, ROUND(price, 0)
FROM fake_apps;

SELECT ROUND(AVG(price),2)
FROM fake_apps;

/* Oftentimes, we will want to calculate an aggregate for data with certain characteristics.
 * For instance, we might want to know the mean IMDb ratings for all movies each year. 
 * We could calculate each number by a series of queries with different WHERE statements, like so: 
SELECT AVG(imdb_rating)
FROM movies
WHERE year = 1999;
 
SELECT AVG(imdb_rating)
FROM movies
WHERE year = 2000;
 
SELECT AVG(imdb_rating)
FROM movies
WHERE year = 2001;
*/
SELECT year,
   AVG(imdb_rating)
FROM movies
GROUP BY year
ORDER BY year;

SELECT price, COUNT(*) 
FROM fake_apps
GROUP BY price;

SELECT price, COUNT(*) 
FROM fake_apps
WHERE downloads>20000
GROUP BY price;

SELECT category, 
  SUM(downloads)
FROM fake_apps
GROUP BY category;

/* GROUP BY a calculation done on a column. */
SELECT ROUND(imdb_rating),
   COUNT(name)
FROM movies
GROUP BY ROUND(imdb_rating)
ORDER BY ROUND(imdb_rating);

/* more efficient way to above */
SELECT ROUND(imdb_rating),
   COUNT(name)
FROM movies
GROUP BY 1
ORDER BY 1;

SELECT category, 
   price,
   AVG(downloads)
FROM fake_apps
GROUP BY category, price;

/* filter groups. */
SELECT year,
   genre,
   COUNT(name)
FROM movies
GROUP BY 1, 2
HAVING COUNT(name) > 10;

/* It returns the average downloads (rounded) and the number of apps – at each price point. 
 * However, certain price points don’t have very many apps, so their average downloads are less meaningful.*/
SELECT price, 
   ROUND(AVG(downloads)),
   COUNT(*)
FROM fake_apps
GROUP BY price;

SELECT price, 
   ROUND(AVG(downloads)),
   COUNT(*)
FROM fake_apps
GROUP BY price
HAVING COUNT(*)>10;